<div class="qd_column_container" style="@GetGridStyle()">
    @foreach (var content in Contents)
    {
        <QuickDockContainer Content="@content"></QuickDockContainer>
        if (content != Contents.Last())
        {
            <div class="qd_horizontal_splitter" onmousedown="@(e => OnMouseDown(e))"></div>
        }
    }
</div>
@using Microsoft.Extensions.Logging;
@inject ILogger<QuickDockColumnContainer> logger
@functions {
    [CascadingParameter] protected QuickDockConfig Config { get; set; }
    [Parameter] protected List<QuickDockContent> Contents { get; set; }

    long? split = null;

    private string CalcSplit()
    {
        return split != null ? $"{split}px" : "auto";
    }

    public string GetGridStyle()
    {
        string rows = $"{CalcSplit()} 5px auto";
        //var rows = string.Join(" 5px ", Enumerable.Repeat("auto", Contents.Count));
        return $"height: 100%; display: grid; grid-template-columns: auto; grid-template-rows: {rows}";
    }

    public void OnMouseDown(UIMouseEventArgs e)
    {
        Config.Input.MouseMove += OnMouseMove;
        Config.Input.MouseUp += OnMouseUp;
    }

    public void OnMouseMove(UIMouseEventArgs e)
    {
        split = e.ClientY - Config.MainContainerRect.y;
    }

    public void OnMouseUp(UIMouseEventArgs e)
    {
        Config.Input.MouseMove -= OnMouseMove;
        Config.Input.MouseUp -= OnMouseUp;
    }
}